{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\radug\\\\Documents\\\\Programming Related\\\\Personal Projects\\\\Web Applications\\\\Weather Application\\\\Client\\\\weather-application\\\\src\\\\Components\\\\WeatherCard.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WeatherCard = ({\n  latitude,\n  longitude\n}) => {\n  _s();\n  var _searchQueryResponse$;\n  const MAX_CITY_RESPONSE_NUMBER = 10;\n  const [weatherData, setWeatherData] = useState(undefined); // TODO: Change 'any' to 'WeatherData'\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchQueryResponse, setSearchQueryResponse] = useState([]); // TODO: Change 'any' to 'SearchQueryResponse'\n  const [selectedCity, setSelectedCity] = useState(undefined);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      if (selectedCity) {\n        try {\n          const response = await axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${selectedCity.latitude}&longitude=${selectedCity.longitude}&hourly=temperature_2m,uv_index,cloudcover&daily=weathercode,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,sunrise,sunset,uv_index_max,uv_index_clear_sky_max,precipitation_sum,rain_sum,showers_sum,snowfall_sum,windspeed_10m_max,windgusts_10m_max,winddirection_10m_dominant&current_weather=true&timezone=auto&forecast_days=16`);\n          console.log(response.data);\n          setWeatherData(response.data);\n        } catch (error) {\n          console.error(\"Error fetching weather data. \" + error);\n        }\n      }\n    };\n    fetchWeatherData();\n  }, [selectedCity]);\n  useEffect(() => {\n    const fetchSearchQueryResponse = async () => {\n      try {\n        const response = await axios.get(`https://geocoding-api.open-meteo.com/v1/search?name=${searchQuery}&count=10&language=en&format=json`);\n        console.log(response.data);\n        setSearchQueryResponse(response.data);\n      } catch (error) {\n        console.error(\"Error fetching geolocation data. \" + error);\n      }\n    };\n    fetchSearchQueryResponse();\n  }, [searchQuery]);\n  const handleOnSearchQueryChange = event => {\n    setSearchQuery(event.target.value);\n  };\n  const handleOnSearchQueryClick = () => {\n    setSearchDropdownOpen(true);\n  };\n\n  // TODO (maybe)\n  const handleOnSearchQueryFocusOut = () => {\n    // setSearchDropdownOpen(false);\n  };\n  const handleOnSearchQueryResponseClick = city => {\n    setSelectedCity(city);\n    setSearchDropdownOpen(false);\n    setSearchQuery(\"\");\n  };\n  const handleOnSubmit = event => {\n    event.preventDefault();\n    if (searchQueryResponse.results) {\n      setSelectedCity(searchQueryResponse.results[0]);\n    }\n  };\n  const getHourlyConditionStatus = () => {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-card-search\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"weather-card-search-form\",\n          onSubmit: handleOnSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"weather-card-search-box\",\n            type: \"text\",\n            value: searchQuery,\n            onChange: handleOnSearchQueryChange,\n            onClick: handleOnSearchQueryClick\n            // onBlur={handleOnSearchQueryFocusOut} // TODO (maybe)\n            ,\n            placeholder: \"Search by city name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-card-search-dropdown\",\n            children: searchDropdownOpen && (searchQueryResponse === null || searchQueryResponse === void 0 ? void 0 : (_searchQueryResponse$ = searchQueryResponse.results) === null || _searchQueryResponse$ === void 0 ? void 0 : _searchQueryResponse$.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"weather-card-search-dropdown-item\",\n              onClick: () => handleOnSearchQueryResponseClick(result),\n              children: [result.name, /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: \"12px\"\n                },\n                children: [\", \", result.country]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 45\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 41\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), weatherData && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-card-current-main\",\n          children: selectedCity && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [selectedCity.name, /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: \"12px\"\n                },\n                children: [\", \", selectedCity.country_code]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this), weatherData && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: getHourlyConditionStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  'fontSize': '60px'\n                },\n                children: [Math.round(weatherData.current_weather.temperature), \"\\u2103\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-card-hourly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-card-daily\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(WeatherCard, \"Wh4QVi0BOkIoJYP2PapKQYu8Lc8=\");\n_c = WeatherCard;\nexport default WeatherCard;\nvar _c;\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","WeatherCard","latitude","longitude","_s","_searchQueryResponse$","MAX_CITY_RESPONSE_NUMBER","weatherData","setWeatherData","undefined","searchQuery","setSearchQuery","searchQueryResponse","setSearchQueryResponse","selectedCity","setSelectedCity","searchDropdownOpen","setSearchDropdownOpen","fetchWeatherData","response","get","console","log","data","error","fetchSearchQueryResponse","handleOnSearchQueryChange","event","target","value","handleOnSearchQueryClick","handleOnSearchQueryFocusOut","handleOnSearchQueryResponseClick","city","handleOnSubmit","preventDefault","results","getHourlyConditionStatus","children","className","onSubmit","type","onChange","onClick","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","result","index","name","style","fontSize","country","country_code","Math","round","current_weather","temperature","_c","$RefreshReg$"],"sources":["C:/Users/radug/Documents/Programming Related/Personal Projects/Web Applications/Weather Application/Client/weather-application/src/Components/WeatherCard.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\ninterface Props {\r\n    latitude: number;\r\n    longitude: number;\r\n}\r\n\r\ninterface WeatherData {\r\n    // TODO\r\n}\r\n\r\ninterface searchQueryResponse {\r\n    // TODO\r\n}\r\n\r\nconst WeatherCard: React.FC<Props> = ({ latitude, longitude }) => {\r\n    const MAX_CITY_RESPONSE_NUMBER = 10;\r\n\r\n    const [weatherData, setWeatherData] = useState<any | undefined>(undefined); // TODO: Change 'any' to 'WeatherData'\r\n    const [searchQuery, setSearchQuery] = useState<string>(\"\");\r\n    const [searchQueryResponse, setSearchQueryResponse] = useState<any | undefined>([]); // TODO: Change 'any' to 'SearchQueryResponse'\r\n    const [selectedCity, setSelectedCity] = useState<any>(undefined);\r\n    const [searchDropdownOpen, setSearchDropdownOpen] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const fetchWeatherData = async () => {\r\n            if (selectedCity) {\r\n                try {\r\n                    const response = await axios.get(\r\n                        `https://api.open-meteo.com/v1/forecast?latitude=${selectedCity.latitude}&longitude=${selectedCity.longitude}&hourly=temperature_2m,uv_index,cloudcover&daily=weathercode,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,sunrise,sunset,uv_index_max,uv_index_clear_sky_max,precipitation_sum,rain_sum,showers_sum,snowfall_sum,windspeed_10m_max,windgusts_10m_max,winddirection_10m_dominant&current_weather=true&timezone=auto&forecast_days=16`\r\n                    );\r\n                    console.log(response.data);\r\n                    setWeatherData(response.data);\r\n                } catch (error) {\r\n                    console.error(\"Error fetching weather data. \" + error);\r\n                }\r\n            }\r\n        };\r\n        fetchWeatherData();\r\n    }, [selectedCity]);\r\n\r\n    useEffect(() => {\r\n        const fetchSearchQueryResponse = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    `https://geocoding-api.open-meteo.com/v1/search?name=${searchQuery}&count=10&language=en&format=json`\r\n                );\r\n                console.log(response.data);\r\n                setSearchQueryResponse(response.data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching geolocation data. \" + error);\r\n            }\r\n        };\r\n        fetchSearchQueryResponse();\r\n    }, [searchQuery]);\r\n\r\n    const handleOnSearchQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchQuery(event.target.value);\r\n    };\r\n\r\n    const handleOnSearchQueryClick = () => {\r\n        setSearchDropdownOpen(true);\r\n    };\r\n\r\n    // TODO (maybe)\r\n    const handleOnSearchQueryFocusOut = () => {\r\n        // setSearchDropdownOpen(false);\r\n    }\r\n\r\n    const handleOnSearchQueryResponseClick = (city: any) => {\r\n        setSelectedCity(city);\r\n        setSearchDropdownOpen(false);\r\n        setSearchQuery(\"\");\r\n    };\r\n\r\n    const handleOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if (searchQueryResponse.results) {\r\n            setSelectedCity(searchQueryResponse.results[0]);\r\n        }\r\n    };\r\n\r\n    const getHourlyConditionStatus = () => {\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"weather-card\">\r\n                <div className=\"weather-card-search\">\r\n                    <form\r\n                        className=\"weather-card-search-form\"\r\n                        onSubmit={handleOnSubmit}\r\n                    >\r\n                        <input\r\n                            className=\"weather-card-search-box\"\r\n                            type=\"text\"\r\n                            value={searchQuery}\r\n                            onChange={handleOnSearchQueryChange}\r\n                            onClick={handleOnSearchQueryClick}\r\n                            // onBlur={handleOnSearchQueryFocusOut} // TODO (maybe)\r\n                            placeholder={\"Search by city name\"}\r\n                        ></input>\r\n                        <div className=\"weather-card-search-dropdown\">\r\n                            {searchDropdownOpen &&\r\n                                searchQueryResponse?.results?.map(\r\n                                    (result: any, index: number) => (\r\n                                        <div\r\n                                            className=\"weather-card-search-dropdown-item\"\r\n                                            key={index}\r\n                                            onClick={() =>\r\n                                                handleOnSearchQueryResponseClick(\r\n                                                    result\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            {result.name}\r\n                                            <span style={{ fontSize: \"12px\" }}>\r\n                                                , {result.country}\r\n                                            </span>\r\n                                        </div>\r\n                                    )\r\n                                )}\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                {weatherData && (\r\n                    <>\r\n                        <div className=\"weather-card-current-main\">\r\n                        {selectedCity && (\r\n                            <>\r\n                                <p>\r\n                                    {selectedCity.name}\r\n                                    <span style={{ fontSize: \"12px\" }}>\r\n                                        , {selectedCity.country_code}\r\n                                    </span>\r\n                                </p>\r\n                                {\r\n                                    weatherData && (\r\n                                        <>\r\n                                            <p>{getHourlyConditionStatus}</p>\r\n                                            <p style={{'fontSize': '60px'}}>{Math.round(weatherData.current_weather.temperature)}℃</p>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                            </>\r\n                        )}\r\n                        </div>\r\n                        <div className=\"weather-card-hourly\">\r\n\r\n                        </div>\r\n                        <div className=\"weather-card-daily\">\r\n\r\n                        </div>\r\n                    </>\r\n                )}\r\n                \r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}